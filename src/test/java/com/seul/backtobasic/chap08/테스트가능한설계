# 테스트 가능한 설계

1. 하드 코딩된 경로
 - 테스트 환경에 따라 경로를 다르게 줄 수 있는 수단이 없다.
 - 해결 방법
  1) setter()를 이용하여 경로를 전달 받는다.
  2) 메서드 실행 시 인자로 전달 받는다.

2. 의존 객체를 직접 생성
 - 의존 대상을 코드 내부에서 직접 생성하는 경우, 해당 객체가 올바르게 동작하는 데 필요한 모든 환경을 구성해야 한다.
 - 해결 방법
  1) 의존 대상을 주입 받는다. (생성자 or setter()) -> 대역을 사용할 수 있음
  2) 레거시 코드가 생성자 없는 버전을 사용한다면, 기존 코드는 유지하고 setter()를 이용해 의존 대상을 교체한다.

3. 정적 메서드 사용
 - 외부 라이브러리가 정적 메서드를 제공한다면 대체할 수 없다.
 - 해결 방법
  1) 외부 라이브러리는 직접 사용하지 말고 감싸서 사용하기
  대역으로 대체하기 어렵다면, 외부 라이브러리와 연동하기 위한 타입을 따로 만든다.
  테스트 대상이 분리한 타입을 사용하고,
  테스트 코드는 해당 타입을 대역으로 대체한다.

4. 실행 시점에 따라 달라지는 결과
 - 테스트 대상이 시간이나 임의 값을 사용하면 테스트 시점에 따라 테스트 결과가 달라진다.
 - 해결 방법
  1) 시간이나 임의 값을 제공하는 기능을 별도로 분리한다.
  LocalDateTime.now()를 실행하는 별도 클래스로 빼고, Mock을 이용해서 리턴 값을 정해두면 된다.

5. 역할이 섞여있는 코드
 - 테스트 하고 싶은 코드가 있는데 역할이 섞여있어 나머지 코드가 올바르게 동작해야만 비로소 테스트 하고 싶은 코드에 대한 테스트가 가능하다.
 - 해결 방법
  1) 테스트 하고 싶은 코드를 분리한다. (별도 클래스...)